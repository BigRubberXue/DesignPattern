这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。
这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。


抽象工厂模式（Abstract Factory Pattern）：是围绕一个超级工厂创建其他工厂。提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。

工厂模式（Factory Pattern）： 是 Java 中最常用的设计模式之一。定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。

单例模式（Singleton Pattern）：保证一个类仅有一个实例，并提供一个访问它的全局访问点。

原型模式（Prototype Pattern）： 是用于创建重复的对象，同时又能保证性能。用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。

建造者模式（Builder Pattern）： 使用多个简单的对象一步一步构建成一个复杂的对象。将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。
